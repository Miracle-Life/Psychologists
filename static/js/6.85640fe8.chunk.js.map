{"version":3,"sources":["Api/api.js","store/actions.js","component/AddUser/AddUser.jsx","HOC/withAuthRedirect.jsx","component/AddUser/AddUserContainer.jsx"],"names":["usersAPI","userId","r","ref","db","update","set","name","email","photo","type","followed","id","Math","floor","random","acceptFollow","user","ADD_FAVORITE_USERS","acceptUnfollow","REMOVE_FAVORITE_USERS","toggleIsFetching","isFetching","TOGGLE_IS_FETCHING","toggleInProgress","TOGGLE_IS_FAVORING_PROGRESS","setUserThunkCreator","dispatch","a","getUsersThunkCreator","query","orderByChild","equalTo","starCountRef","onValue","res","users","val","GET_USERS","getUsers","following","unfollowing","delUser","AddUser","props","User","nameRef","React","createRef","emailRef","typeRef","photoRef","className","onSubmit","event","preventDefault","current","value","currentTarget","reset","console","log","htmlFor","placeholder","required","defaultValue","onChange","reader","FileReader","onload","target","result","readAsDataURL","files","mapStateToPropsForRedirect","state","isAuth","authUser","compose","connect","usersPage","Component","to"],"mappings":"8VAaaA,G,MAAW,SAMVC,GACN,IAAMC,EAAIC,YAAIC,IAAI,kBAAoBH,GACtC,OAAOI,YAAOH,EAAG,CAAC,UAAY,MARzBF,EAAW,SAYRC,GACR,IAAMC,EAAIC,YAAIC,IAAI,kBAAoBH,GACtC,OAAOI,YAAOH,EAAG,CAAC,UAAY,KAdzBF,EAAW,SAkBVC,GACN,OAAOK,YAAIH,YAAIC,IAAI,kBAAoBH,GAAS,OAnB3CD,EAAW,SAuBZO,EAAMC,EAAOC,EAAOC,GACxB,OAAOJ,YAAIH,YAAIC,IAAI,kBAAoBG,GAAO,CAC1CC,MAAOA,EACPG,UAAU,EACVC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBN,MAAiB,KAAVA,EAAe,OAASA,EAC/BC,KAAMA,KClCLM,EAAe,SAACf,EAAQgB,GAAT,MAAmB,CAACP,KAAMQ,IAAoBjB,SAAQgB,SACrEE,EAAiB,SAAClB,EAAQgB,GAAT,MAAmB,CAACP,KAAMU,IAAuBnB,SAAQgB,SAC1EI,EAAmB,SAACC,GAAD,MAAiB,CAACZ,KAAMa,IAAoBD,eAC/DE,EAAmB,SAACF,EAAYrB,GAAb,MAAyB,CAACS,KAAMe,IAA6BH,aAAYrB,WAK5FyB,EAAsB,SAACnB,EAAMC,EAAOC,EAAOC,GACpD,8CAAO,WAAOiB,GAAP,SAAAC,EAAA,6DACHD,EAASN,GAAiB,IADvB,SAEGrB,EAAiBO,EAAMC,EAAOC,EAAOC,GAFxC,OAGHiB,EAASN,GAAiB,IAHvB,2CAAP,uDAOSQ,EAAuB,WAChC,OAAO,SAACF,GACJA,EAASN,GAAiB,IACHS,YAAM3B,YAAIC,IAAI,iBAAkB2B,YAAa,QAASC,YAAQ,qDAArF,IACMC,EAAe9B,YAAIC,IAAI,iBAC7B8B,YAAQD,GAAc,SAACE,GACnB,IAAMC,EAAQD,EAAIE,MAClBV,EAnBY,SAACS,GAAD,MAAY,CAAC1B,KAAM4B,IAAWF,SAmBjCG,CAASH,IAClBT,EAASN,GAAiB,SAKzBmB,EAAY,SAACvC,EAAQgB,GAC9B,8CAAO,WAAOU,GAAP,SAAAC,EAAA,6DACHD,EAASH,GAAiB,EAAMvB,IAD7B,SAEGD,EAAmBiB,GAFtB,OAGHU,EAASX,EAAaf,EAAQgB,IAC9BU,EAASH,GAAiB,EAAOvB,IAJ9B,2CAAP,uDAUSwC,EAAc,SAACxC,EAAQgB,GAChC,8CAAO,WAAOU,GAAP,SAAAC,EAAA,6DACHD,EAASH,GAAiB,EAAMvB,IAD7B,SAEGD,EAAqBiB,GAFxB,OAGHU,EAASR,EAAelB,EAAQgB,IAChCU,EAASH,GAAiB,EAAOvB,IAJ9B,2CAAP,uDASSyC,EAAU,SAACzC,EAAQgB,GAC5B,8CAAO,WAAOU,GAAP,SAAAC,EAAA,6DACHD,EAASN,GAAiB,IADvB,SAEGrB,EAAmBiB,GAFtB,OAIHU,EAASH,GAAiB,EAAOvB,IAJ9B,2CAAP,wD,mFCqDW0C,EA5GC,SAACC,GAEb,IAAIC,EACEC,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YACjBE,EAAUH,IAAMC,YAChBG,EAAWJ,IAAMC,YAkCvB,OACI,qBAAKpC,GAAG,MAAMwC,UAAU,sBAAxB,SACI,uBAAMC,SA1BK,SAAAC,GACfA,EAAMC,iBAIN,IAAMtC,EAAO,CACTV,KAAMuC,EAAQU,QAAQC,MACtBjD,MAAOyC,EAASO,QAAQC,MACxB/C,KAAMwC,EAAQM,QAAQC,MACtBhD,MAAOoC,GAAQ,QAKnBvC,YAAIH,YAAIC,IAAI,kBAAoBa,EAAKV,MAAO,CACxCC,MAAOS,EAAKT,MACZG,UAAU,EACVC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBN,MAAsB,KAAfQ,EAAKR,MAAe,OAASQ,EAAKR,MACzCC,KAAMO,EAAKP,OAEf4C,EAAMI,cAAcC,QACpBC,QAAQC,IAAR,qFAA8B5C,EAAKV,KAAnC,yFAII,UACI,sBAAK6C,UAAU,OAAf,UACI,uBAAOU,QAAQ,gBAAgBV,UAAU,aAAzC,uBACA,uBACIjD,IAAK2C,EACLpC,KAAK,OACL0C,UAAU,eACVxC,GAAG,gBACH,mBAAiB,WACjBmD,YAAY,gJACZC,UAAQ,IAEZ,qBAAKpD,GAAG,WAAWwC,UAAU,YAA7B,8DAGJ,sBAAKA,UAAU,OAAf,UACI,uBAAOU,QAAQ,iBAAiBV,UAAU,aAA1C,2BACA,uBACIjD,IAAK8C,EACLvC,KAAK,QACL0C,UAAU,eACVxC,GAAG,iBACH,mBAAiB,YACjBmD,YAAY,iFACZC,UAAQ,IAEZ,qBAAKpD,GAAG,YAAYwC,UAAU,YAA9B,+DAGJ,sBAAKA,UAAU,OAAf,UACI,uBAAOU,QAAQ,gBAAgBV,UAAU,aAAzC,uBACA,yBACIA,UAAU,cACVxC,GAAG,gBACHT,IAAK+C,EACL,mBAAiB,WAJrB,UAMI,sFACA,oHACA,wBAAQe,cAAY,EAApB,iEAGJ,qBAAKrD,GAAG,WAAWwC,UAAU,YAA7B,8DAGJ,sBAAKA,UAAU,OAAf,UACI,uBAAOU,QAAQ,iBAAiBV,UAAU,aAA1C,wBACA,uBACIjD,IAAKgD,EAELzC,KAAK,OACL0C,UAAU,eACVxC,GAAG,iBACH,mBAAiB,YACjBmD,YAAY,sJACZG,SAzFI,SAACZ,GACrB,IAAMa,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAf,GACZT,EAAOS,EAAMgB,OAAOC,QAExBJ,EAAOK,cAAclB,EAAMgB,OAAOG,MAAM,OAsF5B,qBAAK7D,GAAG,YAAYwC,UAAU,YAA9B,+DAGJ,wBAAQ1C,KAAK,SAAS0C,UAAU,kBAAhC,0B,wCCtGZsB,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,SAASD,SCiBZE,4BACXC,aALkB,SAACJ,GAAD,MAAY,CAC9BrD,WAAYqD,EAAMK,UAAU1D,WAC5BsD,OAAQD,EAAME,SAASD,UAGE,CAACpD,qBAAkBE,2BDfhB,SAACuD,GAW7B,OAAOF,YAAQL,EAARK,EAVmB,SAACnC,GAEvB,OAAKA,EAAMgC,OAIH,cAACK,EAAD,eAAerC,IAHZ,cAAC,IAAD,CAAUsC,GAAI,gBCUlBJ,EAXU,SAAClC,GACtB,OACI,mCACI,cAAC,EAAD,CAASlB,oBAAqBkB,EAAMlB","file":"static/js/6.85640fe8.chunk.js","sourcesContent":["import {child, get, onValue, ref, set, update} from \"firebase/database\";\r\nimport {auth, currentUser, db, dbRef} from \"../base\";\r\nimport {\r\n    onAuthStateChanged,\r\n    signInWithEmailAndPassword,\r\n    updateProfile,\r\n    signInWithPopup,\r\n    updateEmail,\r\n    updatePassword,\r\n    deleteUser, GoogleAuthProvider, signOut\r\n} from \"firebase/auth\";\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers() {\r\n\r\n    },\r\n\r\n    //Выбрать пользователя как follow\r\n    setFollow(userId) {\r\n        const r = ref(db, '/psychologists/' + userId)\r\n        return update(r, {\"followed\": true})\r\n    },\r\n\r\n    //Выбрать пользователя как unfollow\r\n    setUnfollow(userId) {\r\n        const r = ref(db, '/psychologists/' + userId)\r\n        return update(r, {\"followed\": false})\r\n    },\r\n\r\n    //Удалить карточку пользователя\r\n    setDelete(userId) {\r\n        return set(ref(db, '/psychologists/' + userId), null)\r\n    },\r\n\r\n    //Создать новую карточку пользователя в базе\r\n    setUser(name, email, photo, type) {\r\n        return set(ref(db, '/psychologists/' + name), {\r\n            email: email,\r\n            followed: false,\r\n            id: Math.floor(Math.random() * 1000000),\r\n            photo: photo === '' ? 'null' : photo,\r\n            type: type\r\n        });\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n\r\n    //Создать нового пользователя с email и password\r\n    createUserWithEmailAndPassword(email, password) {\r\n        return signInWithEmailAndPassword(auth, email, password)\r\n            .then((userCredential) => {\r\n                const user = userCredential.user;\r\n                console.log('Create User Successfully', user)\r\n            })\r\n            .catch((error) => {\r\n                const errorCode = error.code;\r\n                console.log('createUserWithEmailAndPassword-errorCode', errorCode)\r\n                const errorMessage = error.message;\r\n                console.log('createUserWithEmailAndPassword-errorMessage', errorMessage)\r\n            });\r\n    },\r\n\r\n    //Войти в аккаунт с использованием email и password если пользователь зарегистрирован\r\n    signInWithEmailAndPassword(email, password) {\r\n        // return signInWithEmailAndPassword(auth, email, password)\r\n        //     .then((userCredential) => {\r\n        //         const user = userCredential.user;\r\n        //         console.log('Signed in', user)\r\n        //     })\r\n        //     .catch((error) => {\r\n        //         const errorCode = error.code;\r\n        //         console.log('signInWithEmailAndPassword-errorCode', errorCode)\r\n        //         const errorMessage = error.message;\r\n        //         console.log('signInWithEmailAndPassword-errorMessage', errorMessage)\r\n        //     });\r\n    },\r\n\r\n    //Войти в аккаунт с помощью Google аккаунта.\r\n    signInWithGoogle() {\r\n        // const provider = new GoogleAuthProvider();\r\n        // return signInWithPopup(auth, provider)\r\n        //     .then((result) => {\r\n        //         const credential = GoogleAuthProvider.credentialFromResult(result);\r\n        //         console.log('signInWithGoogle-Credential', credential)\r\n        //         const token = credential.accessToken;\r\n        //         console.log('signInWithGoogle-Token', token)\r\n        //         const user = result.user;\r\n        //         console.log('signInWithGoogle-User', user)\r\n        //     }).catch((error) => {\r\n        //     const errorCode = error.code;\r\n        //     console.log('signInWithGoogle-ErrorCode', errorCode)\r\n        //     const errorMessage = error.message;\r\n        //     console.log('signInWithGoogle-ErrorMessage', errorMessage)\r\n        //     const email = error.email;\r\n        //     console.log('signInWithGoogle-ErrorEmail', email)\r\n        //     const credential = GoogleAuthProvider.credentialFromError(error);\r\n        //     console.log('signInWithGoogle-ErrorCredential', credential)\r\n        // });\r\n    },\r\n\r\n    //Получить текущего пользователя, вошедшего в систему\r\n    onAuthStateChanged() {\r\n        return onAuthStateChanged(auth, (currentUser) => {\r\n            if (currentUser) {\r\n                console.log('User is signed in', currentUser)\r\n            } else {\r\n                console.log('User is signed out')\r\n            }\r\n        });\r\n    },\r\n\r\n    //Обновить профиль пользователя\r\n    updateProfile(name, photo) {\r\n        return updateProfile(currentUser, {\r\n            displayName: name,\r\n            photoURL: photo,\r\n        }).then(() => {\r\n            console.log('Profile updated!')\r\n        }).catch((error) => {\r\n            console.log('ERROR-updateProfile', error)\r\n        });\r\n    },\r\n\r\n    //Обновить email пользователя\r\n    updateEmail(email) {\r\n        return updateEmail(currentUser, email).then(() => {\r\n            console.log('Email updated!')\r\n        }).catch((error) => {\r\n            console.log('ERROR-updateEmail', error)\r\n        });\r\n    },\r\n\r\n    //Обновить password пользователя\r\n    updatePassword(newPassword) {\r\n        return updatePassword(currentUser, newPassword).then(() => {\r\n            console.log('Password updated successful')\r\n        }).catch((error) => {\r\n            console.log('ERROR-updatePassword', error)\r\n        });\r\n    },\r\n\r\n    //Удалить учетную запись пользователя\r\n    deleteUser() {\r\n        return deleteUser(currentUser).then(() => {\r\n            // console.log(`${user.displayName} deleted`)\r\n            console.log('User deleted')\r\n        }).catch((error) => {\r\n            console.log('ERROR-User_Deleted', error)\r\n        });\r\n    },\r\n\r\n    //Выход пользователя из системы\r\n    signOut() {\r\n        return signOut(auth).then(() => {\r\n            console.log('Sign-out successful')\r\n        }).catch((error) => {\r\n            console.log('signOut-An error happened', error)\r\n        });\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\n// export const getUsers = (toggleIsFetching,setUsers) => {\r\n//     toggleIsFetching(true)\r\n//     const starCountRef = ref(db, \"psychologists\");\r\n//     onValue(starCountRef, (res) => {\r\n//         const data = res.val();\r\n//         setUsers(data)\r\n//         toggleIsFetching(false)\r\n//     });\r\n// }\r\n\r\n\r\n//получение данных с базы в компоненте\r\n// setTimeout(() => {\r\n//     this.props.toggleIsFetching(true)\r\n//     const starCountRef = ref(db, \"psychologists\");\r\n//     onValue(starCountRef, (res) => {\r\n//         const data = res.val();\r\n//         this.props.setUsers(data)\r\n//         this.props.toggleIsFetching(false)\r\n//     });\r\n// }, 2500)\r\n","import {\r\n    ADD_FAVORITE_USERS, REMOVE_FAVORITE_USERS, TOGGLE_IS_FETCHING, TOGGLE_IS_FAVORING_PROGRESS, REMOVE_USER, GET_USERS\r\n} from \"./actionsType\";\r\nimport {onValue, ref, query, orderByChild, equalTo} from \"firebase/database\";\r\nimport {db} from \"../base\";\r\nimport {usersAPI} from \"../Api/api\";\r\n\r\n\r\nexport const acceptFollow = (userId, user) => ({type: ADD_FAVORITE_USERS, userId, user})\r\nexport const acceptUnfollow = (userId, user) => ({type: REMOVE_FAVORITE_USERS, userId, user})\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleInProgress = (isFetching, userId) => ({type: TOGGLE_IS_FAVORING_PROGRESS, isFetching, userId})\r\nexport const getUsers = (users) => ({type: GET_USERS, users})\r\nexport const deleteUser = (userId, user) => ({type: REMOVE_USER, userId, user})\r\n\r\n\r\nexport const setUserThunkCreator = (name, email, photo, type) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        await usersAPI.setUser(name, email, photo, type)\r\n        dispatch(toggleIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const getUsersThunkCreator = () => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const mostViewedSort = query(ref(db, 'psychologists'), orderByChild('type'), equalTo('Психолог'))\r\n        const starCountRef = ref(db, \"psychologists\");\r\n        onValue(starCountRef, (res) => {\r\n            const users = res.val();\r\n            dispatch(getUsers(users))\r\n            dispatch(toggleIsFetching(false))\r\n        })\r\n    }\r\n}\r\n\r\nexport const following = (userId, user) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleInProgress(true, userId))\r\n        await usersAPI.setFollow(user)\r\n        dispatch(acceptFollow(userId, user))\r\n        dispatch(toggleInProgress(false, userId))\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowing = (userId, user) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleInProgress(true, userId))\r\n        await usersAPI.setUnfollow(user)\r\n        dispatch(acceptUnfollow(userId, user))\r\n        dispatch(toggleInProgress(false, userId))\r\n\r\n    }\r\n}\r\n\r\nexport const delUser = (userId, user) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        await usersAPI.setDelete(user)\r\n        // dispatch(deleteUser(user))\r\n        dispatch(toggleInProgress(false, userId))\r\n\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {db} from \"../../base\";\r\nimport {child, update, push, ref, set, get} from \"firebase/database\";\r\n\r\nconst AddUser = (props) => {\r\n\r\n    let User\r\n    const nameRef = React.createRef();\r\n    const emailRef = React.createRef();\r\n    const typeRef = React.createRef();\r\n    const photoRef = React.createRef();\r\n\r\n    const onChangeAvatars = (event) => {\r\n        const reader = new FileReader();\r\n        reader.onload = event => {\r\n            User = event.target.result\r\n        };\r\n        reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n    //отменяем перезагрузку страницы при клике на button\r\n    const createUser = event => {\r\n        event.preventDefault();\r\n        //проверка что мы получаем из нашей формы name\r\n        // console.log(this.nameRef.current.value);\r\n        //объект что принимает все значения из нашей формы\r\n        const user = {\r\n            name: nameRef.current.value,\r\n            email: emailRef.current.value,\r\n            type: typeRef.current.value,\r\n            photo: User || 'null'\r\n        };\r\n        //проверка - что мы получаем из полей в нашей форме\r\n        // console.log(user);\r\n\r\n        set(ref(db, '/psychologists/' + user.name), {\r\n            email: user.email,\r\n            followed: false,\r\n            id: Math.floor(Math.random() * 1000000),\r\n            photo: user.photo === '' ? 'null' : user.photo,\r\n            type: user.type\r\n        });\r\n        event.currentTarget.reset();\r\n        console.log(`Пользователь   ${user.name}   добавлен в базу`)\r\n    }\r\n    return (\r\n        <div id='aaa' className='container w-50 dark'>\r\n            <form onSubmit={createUser}>\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"userInputName\" className=\"form-label\">Name user</label>\r\n                    <input\r\n                        ref={nameRef}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"userInputName\"\r\n                        aria-describedby=\"nameHelp\"\r\n                        placeholder='Фамилия и Имя пользователя'\r\n                        required\r\n                    />\r\n                    <div id=\"nameHelp\" className=\"form-text\">We'll never share your Name with anyone else.\r\n                    </div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"userInputEmail\" className=\"form-label\">Email address</label>\r\n                    <input\r\n                        ref={emailRef}\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        id=\"userInputEmail\"\r\n                        aria-describedby=\"emailHelp\"\r\n                        placeholder='Email пользователя'\r\n                        required\r\n                    />\r\n                    <div id=\"emailHelp\" className=\"form-text\">We'll never share your Email with anyone else.\r\n                    </div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"userInputType\" className=\"form-label\">Type user</label>\r\n                    <select\r\n                        className=\"form-select\"\r\n                        id=\"userInputType\"\r\n                        ref={typeRef}\r\n                        aria-describedby=\"typeHelp\"\r\n                    >\r\n                        <option>Психолог</option>\r\n                        <option>Психотерапевт</option>\r\n                        <option defaultValue>Психиатр</option>\r\n                    </select>\r\n\r\n                    <div id=\"typeHelp\" className=\"form-text\">We'll never share your Type with anyone else.\r\n                    </div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"userInputPhoto\" className=\"form-label\">Photo user</label>\r\n                    <input\r\n                        ref={photoRef}\r\n                        // type=\"text\"\r\n                        type=\"file\"\r\n                        className=\"form-control\"\r\n                        id=\"userInputPhoto\"\r\n                        aria-describedby=\"photoHelp\"\r\n                        placeholder='Ссылка на фото пользователя'\r\n                        onChange={onChangeAvatars}\r\n                    />\r\n                    <div id=\"photoHelp\" className=\"form-text\">We'll never share your Photo with anyone else.\r\n                    </div>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AddUser;\r\n","import React from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.authUser.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    const RedirectComponent = (props) => {\r\n        //проверка на авторизацию и показ страницы\r\n        if (!props.isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        return (<Component {...props}/>)\r\n\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n","import React from 'react';\r\nimport AddUser from \"./AddUser\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    setUserThunkCreator,\r\n    toggleInProgress,\r\n} from \"../../store/actions\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect.jsx\";\r\n\r\n\r\nconst AddUserContainer = (props) => {\r\n    return (\r\n        <>\r\n            <AddUser setUserThunkCreator={props.setUserThunkCreator}/>\r\n        </>\r\n    );\r\n};\r\nlet mapStateToProps = (state) => ({\r\n    isFetching: state.usersPage.isFetching,\r\n    isAuth: state.authUser.isAuth,\r\n})\r\nexport default compose(\r\n    connect(mapStateToProps, {toggleInProgress, setUserThunkCreator}),\r\n    withAuthRedirect,\r\n)(AddUserContainer);\r\n\r\n"],"sourceRoot":""}